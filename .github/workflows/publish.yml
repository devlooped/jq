# Builds a final release version and pushes to nuget.org 
# whenever a release is published.
# Requires: secrets.NUGET_API_KEY

name: publish
on:
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      jq:
        description: 'Version of JQ to bundle'

env:
  DOTNET_NOLOGO: true
  Configuration: Release
  PackOnBuild: true
  GeneratePackageOnBuild: true
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  JQVERSION: ${{ github.event.inputs.jq || github.event.release.tag_name }}
  
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive
          fetch-depth: 0

      - name: ⏬ download
        run: |
          echo "Downloading jq release tag jq-${JQVERSION##*/v}"
          gh release download "jq-${JQVERSION##*/v}" --dir src/JQ/tools --clobber -p jq-linux-a*64 --repo jqlang/jq
          gh release download "jq-${JQVERSION##*/v}" --dir src/JQ/tools --clobber -p jq-linux-i386 --repo jqlang/jq
          gh release download "jq-${JQVERSION##*/v}" --dir src/JQ/tools --clobber -p jq-macos* --repo jqlang/jq
          gh release download "jq-${JQVERSION##*/v}" --dir src/JQ/tools --clobber -p jq-windows-* --repo jqlang/jq

      - name: 🙏 build
        run: dotnet build -m:1 -p:version=${GITHUB_REF##*/v} -bl:build.binlog

      - name: 🧪 test
        run: dotnet test --no-build 

      - name: 🐛 logs
        uses: actions/upload-artifact@v4
        if: runner.debug && always()
        with:
          name: logs
          path: '*.binlog'

      - name: 🚀 nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        if: ${{ env.NUGET_API_KEY != '' && github.event.action != 'prereleased' }}
        working-directory: bin
        run: dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate

      - name: ⚙ dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: 🚀 sleet
        env:
          SLEET_CONNECTION: ${{ secrets.SLEET_CONNECTION }}
        if: env.SLEET_CONNECTION != ''
        run: |
          dotnet tool update sleet -g --allow-downgrade --version $(curl -s --compressed ${{ vars.SLEET_FEED_URL }} | jq '.["sleet:version"]' -r)        
          sleet push bin --config none -f --verbose -p "SLEET_FEED_CONTAINER=nuget" -p "SLEET_FEED_CONNECTIONSTRING=${{ secrets.SLEET_CONNECTION }}" -p "SLEET_FEED_TYPE=azure" || echo "No packages found"